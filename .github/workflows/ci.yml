name: pipeline
on: [ push, pull_request ]
jobs:
  build:
    strategy:
      matrix:
        configuration:
          - gcc-debug
          - gcc-sanitize-coverage
          - gcc-musl-static
          - clang-sanitize
        include:
          - configuration: gcc-debug
            compiler: gcc
            cflags: "-Wall -Wextra -Werror -pedantic -O0 -ggdb"
            ldflags: "-O0 -ggdb"
          - configuration: gcc-sanitize-coverage
            compiler: gcc
            cflags: "-Wall -Wextra -Werror -pedantic -O0 -ggdb -fsanitize=address,undefined -fno-sanitize-recover=all -coverage"
            ldflags: "-O0 -ggdb -fsanitize=address,undefined -fno-sanitize-recover=all -coverage"
          - configuration: gcc-musl-static
            compiler: musl-gcc
            cflags: "-Wall -Wextra -Werror -pedantic -O2"
            ldflags: "-O2 -static"
          - configuration: clang-sanitize
            compiler: clang
            cflags: "-Wall -Wextra -Werror -pedantic -O0 -ggdb -fsanitize=address,undefined -fno-sanitize-recover=all"
            ldflags: "-O0 -ggdb -fsanitize=address,undefined -fno-sanitize-recover=all"
    runs-on: ubuntu-latest
    env:
      CC: ${{ matrix.compiler }}
      CFLAGS: ${{ matrix.cflags }}
      LDFLAGS: ${{ matrix.ldflags }}
    steps:
    - name: Install dependencies
      if: ${{ matrix.compiler == 'musl-gcc' }}
      run: sudo apt-get install musl-tools
    - uses: actions/checkout@v3
    - name: Build
      run: make -j "$(nproc)" all
    - name: Pack build output artifacts
      run: tar cvaf build-output-${{ matrix.configuration }}.tar build/ test/data/generated-*/ test/data/test\ directory/.empty/
    - uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: build-output-${{ matrix.configuration }}.tar
  static-analysis:
    strategy:
      matrix:
        linter:
          - clang-tidy
          - cppcheck
        include:
          - linter: clang-tidy
            command: >
              ./scripts/generate-compile-commands-json.sh &&
              ./scripts/run-clang-tidy.sh
          - linter: cppcheck
            command: ./scripts/run-cppcheck.sh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt-get install ${{ matrix.linter }}
    - name: Run static analysis
      run: "${{ matrix.command }}"
  test:
    needs: build
    strategy:
      matrix:
        configuration:
          - gcc-sanitize-coverage
          - gcc-musl-static
          - clang-sanitize
          - valgrind
        include:
          - configuration: gcc-sanitize-coverage
            tarball: "build-output-gcc-sanitize-coverage.tar"
            test-command: "make run-test"
          - configuration: gcc-musl-static
            tarball: "build-output-gcc-musl-static.tar"
            test-command: "make run-test"
          - configuration: clang-sanitize
            tarball: "build-output-clang-sanitize.tar"
            test-command: "make run-test"
          - configuration: valgrind
            tarball: "build-output-gcc-debug.tar"
            test-command: "./scripts/run-all-tests-with-valgrind.sh"
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      if: ${{ matrix.configuration == 'valgrind' }}
      run: sudo apt-get install valgrind
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      id: download-artifacts
      with:
        name: build-output
    - name: Unpack build output artifacts
      run: tar xvaf "${{ steps.download-artifacts.outputs.download-path }}/${{ matrix.tarball }}"
    - name: Test
      run: script -efqc "${{ matrix.test-command }}" /dev/null # Force colored output.
    - uses: actions/upload-artifact@v3
      if: ${{ matrix.configuration == 'gcc-sanitize-coverage' }}
      with:
        name: coverage-data
        path: build/
  upload-coverage:
    needs: [ test, static-analysis ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: coverage-data
        path: build/
    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v3
      with:
        gcov: true
